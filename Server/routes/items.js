import express from 'express';
import Item from '../models/item.js';
import authMiddleware from '../middleware/authMiddleware.js';

const router = express.Router();

router.get('/', async (req, res) => {
  console.log('üì• [GET] /items - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π');
  try {
    const items = await Item.find().populate('userId', 'username email');
    res.json(items);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});


router.get('/:id', async (req, res) => {
  console.log(`üì• [GET] /items/${req.params.id} - –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è`);
  try {
    const item = await Item.findById(req.params.id).populate('userId', 'username email');
    if (!item) {
      console.warn(`‚ö†Ô∏è –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å ID ${req.params.id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
      return res.status(404).json({ error: '–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    }
    res.json(item);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});


router.post('/', authMiddleware, async (req, res) => {
  console.log('üì§ [POST] /items - –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:', req.body);
  try {
    const { name, description, location, image, type, price, ...extraFields } = req.body;

    if (!name || !description || !location || !type || price === undefined) {
      return res.status(400).json({ error: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è' });
    }

    let itemData = { name, description, location, image, type, price, userId: req.user.id };

    switch (type) {
      case '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å':
        if (!extraFields.propertyType || !extraFields.area || !extraFields.rooms) {
          return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏' });
        }
        Object.assign(itemData, {
          propertyType: extraFields.propertyType,
          area: extraFields.area,
          rooms: extraFields.rooms,
        });
        break;

      case '–ê–≤—Ç–æ':
        if (!extraFields.brand || !extraFields.model || !extraFields.year) {
          return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ' });
        }
        Object.assign(itemData, {
          brand: extraFields.brand,
          model: extraFields.model,
          year: extraFields.year,
          mileage: extraFields.mileage ?? null,
        });
        break;

      case '–£—Å–ª—É–≥–∏':
        if (!extraFields.serviceType || !extraFields.experience) {
          return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É—Å–ª—É–≥' });
        }
        Object.assign(itemData, {
          serviceType: extraFields.serviceType,
          experience: extraFields.experience,
          workSchedule: extraFields.workSchedule ?? '',
        });
        break;
    }

    const newItem = new Item(itemData);
    await newItem.save();
    console.log('‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ:', newItem);
    res.status(201).json(newItem);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

router.put('/:id', authMiddleware, async (req, res) => {
  console.log(`üîÑ [PUT] /items/${req.params.id} - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è`);
  try {
    const item = await Item.findById(req.params.id);
    if (!item) {
      console.warn(`‚ö†Ô∏è –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å ID ${req.params.id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
      return res.status(404).json({ error: '–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    }

    if (item.userId.toString() !== req.user.id) {
      return res.status(403).json({ error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –æ–±—ä—è–≤–ª–µ–Ω–∏—é' });
    }

    Object.assign(item, req.body);
    await item.save();

    console.log('‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', item);
    res.json(item);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

router.delete('/:id', authMiddleware, async (req, res) => {
  console.log(`üóë [DELETE] /items/${req.params.id} - –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è`);
  try {
    const item = await Item.findById(req.params.id);
    if (!item) {
      return res.status(404).json({ error: '–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    }

    if (item.userId.toString() !== req.user.id) {
      return res.status(403).json({ error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –æ–±—ä—è–≤–ª–µ–Ω–∏—é' });
    }

    await item.deleteOne();
    console.log(`‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å ID ${req.params.id} —É–¥–∞–ª–µ–Ω–æ`);
    res.status(204).send();
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

export default router;
